# Choose a C compiler. (Must be ANSI C capable).
CC-LDFLAGS = -ffunction-sections -fdata-sections -Wl,-dead_strip
OPT-FLAGS  = -O3
ifeq ($(clang), yes)
  CC = clang-mp-15 -flto
else
  ifeq ($(debug), yes)
    CC = cc -g
    OPT-FLAGS = -O0
  else
    CC = gcc-mp-12 -flto -ffloat-store -frounding-math
  endif
endif
ifeq ($(profgen), yes)
  CC-FLAGS = -fprofile-generate
else
  ifeq ($(profuse), yes)
    ifeq ($(clang), yes)
      CC-FLAGS = -fprofile-use=t4.profdata
    else
      CC-FLAGS = -fprofile-use
    endif
  endif
endif

CC += $(CC-FLAGS) $(CC-LDFLAGS)

#
# 64bit emulator on Linux-x64, 32bit emulator on  Linux-armhf
# CC = gcc -ffloat-store -frounding-math
#
# 32bit emulator on Linux-x86
# CC = gcc -m32 -mfpmath=sse -msse2 -ffloat-store -frounding-math
#
# 32bit/64bit emulator on Linux-POWER
# CC = gcc [-m64] -ffloat-store -frounding-math -std=c99
#

# For a well-optimised version compiled with gcc on a Sun use:
# CFLAGS = -O2 -DSUN -finline -finline-functions -fexpensive-optimizations
# For a reasonably optimised version for NetBSD.
CFLAGS = -I. $(OPT-FLAGS) -Wall -DCURTERM=1 -I$(HOME)/include \
        -DT4NANOMSG=1 \
        -DT4SHLINKS=1 \
        -DT4COMBINATIONS=1 \
        -DT4RELEASE=1
# CFLAGS = -I. -O2 -Wall -DCURTERM=1 -I$(HOME)/include -DT4NANOMSG=1
# CFLAGS = -I. -O0 -Wall -DCURTERM=1 -I$(HOME)/include -DT4NANOMSG=1 -DT4SHLINKS=1 -DT4COMBINATIONS=1
# For a reasonably optimised version for SunOS 4.1.4.
# CFLAGS = -O2 -Wall -DSUN

# Put any additional libraries here.
LFLAGS	= $(HOME)/lib/libnanomsg.a -lm

#
# https://github.com/JuliaMath/openlibm
#
FDMSRC  = k_standard.c s_scalbn.c s_scalbnf.c s_ldexp.c s_ldexpf.c \
	  e_fmod.c e_remainder.c e_sqrt.c w_remainder.c w_sqrt.c

SRC	= $(FDMSRC) curterm.c arithmetic.c fparithmetic.c netcfg.c shlink.c server.c p.c main.c
OBJ	= $(SRC:.c=.o)
GCDA    = $(SRC:.c=.gcda)

t4 : $(OBJ)
	$(CC) $(CFLAGS) $(OBJ) $(LFLAGS) -o t4
	ls -l $@
	cp $@ $(HOME)/bin

clean	:
	$(RM) $(OBJ) $(GCDA)
